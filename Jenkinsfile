pipeline {
    agent any

    environment {
        GITHUB_REPO = 'https://github.com/GuenDuo/java-main.git'
        IMAGE_BACKEND = 'yourdockerhubuser/backend-auth'
        IMAGE_FRONTEND = 'yourdockerhubuser/frontend'
        SONARQUBE_SERVER = 'SonarQube'
        SONAR_PROJECT_KEY = 'java-main-backend'
        DOCKER_COMPOSE_PATH = './'   // Th∆∞ m·ª•c ch·ª©a docker-compose.yml
        VERSION = "v0.${BUILD_NUMBER}"
        DEPLOY_SSH_KEY = 'KeyCuoiKy'  // SSH key ƒë√£ c·∫•u h√¨nh trong Jenkins
        SERVER_USER = 'your-username'  // T√™n ng∆∞·ªùi d√πng tr√™n server (v√≠ d·ª•: ubuntu)
        SERVER_IP = 'your.server.ip'  // ƒê·ªãa ch·ªâ IP c·ªßa server
        REMOTE_PATH = '/path/to/project' // ƒê∆∞·ªùng d·∫´n d·ª± √°n tr√™n server
    }

    stages {
        stage('Checkout') {
            steps {
                echo 'üì• L·∫•y source code t·ª´ GitHub'
                // ƒê·∫£m b·∫£o r·∫±ng refspec ƒë√∫ng v√† branch ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh r√µ r√†ng
                git branch: 'main', url: "${env.GITHUB_REPO}", refspec: '+refs/heads/main:refs/remotes/origin/main'
            }
        }

        stage('Build & Test Backend') {
            steps {
                dir('backend-auth') {
                    echo 'üõ†Ô∏è Build v√† ki·ªÉm tra Backend (Maven)'
                    sh 'mvn clean install'
                }
            }
        }

        stage('SonarQube Analysis') {
            steps {
                dir('backend-auth') {
                    withSonarQubeEnv("${env.SONARQUBE_SERVER}") {
                        sh 'mvn sonar:sonar'
                    }
                }
            }
        }

        stage('Quality Gate') {
            steps {
                timeout(time: 3, unit: 'MINUTES') {
                    script {
                        def qg = waitForQualityGate()
                        if (qg.status != 'OK') {
                            error("‚ùå Quality Gate failed: ${qg.status}")
                        }
                    }
                }
            }
        }

        stage('Build Docker Images') {
            steps {
                echo 'üê≥ ƒê√≥ng g√≥i Docker cho Backend v√† Frontend'
                script {
                    sh "docker build -t ${IMAGE_BACKEND}:${VERSION} backend-auth"
                    sh "docker build -t ${IMAGE_FRONTEND}:${VERSION} frontend"
                }
            }
        }

        stage('Deploy Local by Docker Compose') {
            steps {
                echo 'üöÄ Tri·ªÉn khai l√™n m√¥i tr∆∞·ªùng local b·∫±ng docker-compose'
                sh "docker-compose -f ${DOCKER_COMPOSE_PATH}/docker-compose.yml up -d --build"
            }
        }

        stage('Deploy on Remote Server') {
            steps {
                echo 'üöÄ Deploy l√™n server qua SSH'
                sshagent([DEPLOY_SSH_KEY]) {
                    sh """
                        ssh -o StrictHostKeyChecking=no ${SERVER_USER}@${SERVER_IP} 'cd ${REMOTE_PATH} && git pull && docker-compose up -d --build'
                    """
                }
            }
        }
    }
}
